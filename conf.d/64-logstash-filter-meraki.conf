filter {
 if [type] == "meraki" {
        grok {
                patterns_dir => "/etc/logstash/patterns/meraki.pattern"
                match => [ "message", "%{MERAKILOG}" ]
        }
	if [meraki_type] == "urls" {
		grok {
                	patterns_dir => "/etc/logstash/patterns/meraki.pattern"
                	match => [ "end_of_message", "%{MERAKIURLS}" ]
        	}
	}
	if [meraki_type] == "flows" {
                grok {
                        patterns_dir => "/etc/logstash/patterns/meraki.pattern"
                        match => [ "end_of_message", "%{MERAKIFLOWS}" ]
                }
        }
		
	kv { source => "kv_message" }
	# split ip and port for urls type
	if [meraki_type] == "urls" {
                grok {
                        match => [ "src", "%{DATA:src_ip}:%{INT:src_port}$" ]
			match => [ "dst", "%{DATA:dst_ip}:%{INT:dst_port}$" ]
                }
		mutate {
			remove_field => [ "dst" ]
			remove_field => [ "src" ]
		}
        }
	else {
		 mutate {
                	rename => { "dst" => "dst_ip" }
                	rename => { "src" => "src_ip" }
                	rename => { "dport" => "dst_port" }
                	rename => { "sport" => "src_port" }
		}
	}
	mutate { remove_field => [ "kv_message" ] }
	mutate { remove_field => [ "end_of_message" ] }
 	mutate {
                rename => { "protocol" => "proto" }
                rename => { "agent" => "user_agent" }
                rename => { "mac" => "src_mac" }
	}
	# reset type as meraki when kv overwrite it
	if [type] != "meraki" {
		mutate {
			rename => { "type" => "icmp_type" }
			add_field => { "type" => "meraki" }
		} 
	}
	if [user_agent] {
            useragent {
                source => user_agent
            }
        }

	date {
		match => [ "time_logged", "UNIX" ]
		target => "time_logged"
              }
}
}
