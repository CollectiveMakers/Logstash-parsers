filter {
 if [type] == "ironport-web" {
    grok {
                patterns_dir => "/etc/logstash/patterns/ironport-web.pattern"
                match => [ "message", "%{IRONPORTWEB_CP}" ]
    }
    #if [end_of_message] =~ /.+/ {
		if [log_category] in ["accesslogs", "access log syslog"] {
			grok {
					patterns_dir => "/etc/logstash/patterns/ironport-web.pattern"
					match => [ "end_of_message", "%{IRONPORTWEB_ACCESSLOGS_SP} %{GREEDYDATA:end_of_message}" ]
					overwrite => [ "end_of_message" ]
			}
			# This grok filter allows to handle long URLs which truncate the end of the message ( AsyncOS versions < v8  do not handle message length > 1024 bytes )
			grok {
                                        patterns_dir => "/etc/logstash/patterns/ironport-web.pattern"
                                        match => [ "end_of_message", "(?>%{DATA:url} )(?>(\")?(%{DATA:domain_name}\\)?(-|%{DATA:user_name})(@%{DATA:domain_name_upn})?(\")? )(?>%{DATA:hierarchy_origin}/)(?>(-|%{IP:dst_ip}|%{DATA:dst_host}) )(?>(-|%{DATA:mime_type}) )(?>%{DATA:wsa_acltag}-)(?>%{DATA:wsa_access_decrypt_policy}-)(?>%{DATA:wsa_identity_policy}-)(?>%{DATA:wsa_outbound_malware_scan_policy}-)(?>%{DATA:wsa_data_security_policy}-)(?>%{DATA:wsa_ext_dl_policy}-)(?>%{DATA:wsa_routing_policy} )(?>\<(-|%{DATA:wsa_webcat_code_abbr}),)((-|%{DATA:wsa_wbrs_score}),)(?>(-|%{DATA:wsa_webroot_scan_verdict}),)(?>\"(-|%{DATA:wsa_webroot_spy_name})\",)(?>(-|%{DATA:wsa_webroot_trr}),)(?>(-|%{DATA:wsa_webroot_threat_id}),)(?>(-|%{DATA:wsa_webroot_trace_id}),)(?>(-|%{DATA:wsa_mcafee_scan_verdict}),)(?>\"(-|%{DATA:wsa_mcafee_file_name})\",)(?>(-|%{DATA:wsa_mcafee_av_scan_error}),)(?>(-|%{DATA:wsa_mcafee_av_detect_type}),)(?>(-|%{DATA:wsa_mcafee_av_virus_type}),)(?>\"(-|%{DATA:wsa_mcafee_virus_name})\",)(?>(-|%{DATA:wsa_sophos_scan_verdict}),)(?>(-|%{DATA:wsa_sophos_scan_error}),)(?>\"(-|%{DATA:wsa_sophos_file_name})\",)(?>\"(-|%{DATA:wsa_sophos_virus_name})\",)(?>(-|%{DATA:wsa_ids_scan_verdict}),)(?>(-|%{DATA:wsa_icap_dlp_scan_verdict}),)(?>(-|%{DATA:wsa_webcat_req_code_abbr}),)(?>(-|%{DATA:wsa_webcat_resp_code_abbr}),)(?>\"(-|%{DATA:wsa_resp_dvs_scan_verdict})\",)(?>\"(-|%{DATA:wsa_wbrs_threat_type})\",)(?>\"(-|%{DATA:wsa_avc_app})\",)(?>\"(-|%{DATA:wsa_avc_type})\",)(?>\"(-|%{DATA:wsa_avc_behavior})\",)(?>\"(-|%{DATA:wsa_request_rewrite})\",)(?>%{DATA:wsa_avg_bw},)(?>%{DATA:wsa_bw_throttled},)(?>(\[)?(-|%{DATA:wsa_user_type})(\])?,)(?>\"(-|%{DATA:wsa_req_dvs_scan_verdict})\",)(?>\"(-|%{DATA:wsa_req_dvs_threat_name})\")((-|%{DATA}),\"(-|%{DATA})\",(-|%{DATA}),(-|%{DATA}),\"(-|%{DATA})\",\"(-|%{DATA})\")?(\>)(?: (-|%{DATA:wsa_suspect_ua}))?(?: (?:-|\"%{DATA:user_agent}\"))?(?: %{NUMBER:bytes_sent:int} %{NUMBER:total_bytes:int} (?:-|\"%{DATA:referer}\") (?:-|\"%{DATA:server_header}\") (?:NONE|%{DATA:authentication_method}) %{DATA:proto})?" ]
                        }
			if [url] { mutate { remove_field => [ "end_of_message" ] } } 
			else { 
				# When the field "url" is not created, it means that the end of message corresponds to the URL (probably truncated because of its lenght)
				mutate { rename => { "end_of_message" => "url" }
					 update => { "tags" => "_truncatedmessage" } }
				#grok { match => [ "url", "%{DATA}://%{DATA:dst_host}/%{GREEDYDATA}" ] }
				grok {
                                	patterns_dir => "/etc/logstash/patterns/common.pattern"
                               		match => [ "url", "%{HOST_IN_URL}" ]
                           	}
			}
		}
		else if [log_category] == "proxylogs" or [log_category] == "proxy syslog" or [log_category] == "proxylog_syslog" {
			grok {
					patterns_dir => "/etc/logstash/patterns/ironport-web.pattern"
					match => [ "end_of_message", "%{IRONPORTWEB_PROXYLOGS_LOGIN_FAILURE}",
						   "end_of_message", "%{IRONPORTWEB_PROXYLOGS_AUTH_FAILURE}",
						   "end_of_message", "%{IRONPORTWEB_PROXYLOGS_CLI_CLOSE}",
						   "end_of_message", "%{IRONPORTWEB_PROXYLOGS_CRED_CHK_FAIL}",
						   "end_of_message", "%{IRONPORTWEB_PROXYLOGS_WBRS_REQ_EXPIRED}",
						   "end_of_message", "%{IRONPORTWEB_PROXYLOGS}" ]
			}
			mutate { remove_field => [ "end_of_message" ] }
		}
		else if [log_category] == "idsdataloss_logs" {
                        grok {
                                        patterns_dir => "/etc/logstash/patterns/ironport-web.pattern"
                                        match => [ "end_of_message", "%{IRONPORTWEB_IDSDATALOSS_LOGS}" ]
                        }
                        mutate { remove_field => [ "end_of_message" ] }
        }
		
		if [time_logged] {
			date {
                        	match => [ "time_logged", "MMM dd HH:mm:ss" ]
                        	target => "time_logged"
                	}
		}
        if [user_agent] {
            useragent {
                source => user_agent
                prefix => "ua_"
            }
        }

		# Specific patterns to develop for these log categories (field: log_category) :
		# gui_logs
		# haystackd_logs
		# reportd_logs
		# reportqueryd_logs
		# sntpd_logs
		# sophos_logs
		# updater_logs
		# webrootlogs
    #}
  }
}
