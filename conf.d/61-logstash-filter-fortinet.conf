filter {
 if [type] == "fortinet" {

    # Parse and extract the syslog ID
    grok {
        match => { "message" => "^\<%{POSINT:syslog_id}\>%{GREEDYDATA:kv_message}$" }
    }
    
    # Rename type to avoid duplicate fields or array
    mutate { rename => { "type" => "tmp_type" } }

    # Log parsing
    kv { source => "kv_message" }

    # Fields normalization
    mutate {
        rename => { "date" => "forti_date" }
        rename => { "time" => "forti_time" }
        rename => { "hostname" => "src_host" }
        rename => { "devname" => "hostname" }
        rename => { "device_id" => "serial_number" }
        rename => { "devid" => "serial_number" }
        rename => { "logid" => "log_id" }
        rename => { "subtype" => "log_subtype" }
        rename => { "eventtype" => "forti_event_type" }
        rename => { "level" => "pri" }
        rename => { "vd" => "vdom" }
        rename => { "urlfilteridx" => "forti_urlfilteridx" }
        rename => { "urlfilterlist" => "forti_urlfilterlist" }
        rename => { "logdesc" => "log_desc" }
        rename => { "srcip" => "src_ip" }
        rename => { "src" => "src_ip" }
        rename => { "srcintf" => "src_interface" }
        rename => { "src_int" => "src_interface" }
        rename => { "dstip" => "dst_ip" }
        rename => { "dst" => "dst_ip" }
        rename => { "dstport" => "dst_port" }
        rename => { "dstintf" => "dst_interface" }
        rename => { "dst_int" => "dst_interface" }
        rename => { "poluuid" => "pol_uuid" }
        rename => { "sessionid" => "session_id" }
        rename => { "SN" => "session_id" }
        rename => { "status" => "action" }
        rename => { "policyid" => "policy_id" }
        rename => { "dstcountry" => "dst_country" }
        rename => { "srccountry" => "src_country" }
        rename => { "dir_disp" => "dirdisp" }
        rename => { "tran_disp" => "trandisp" }
        rename => { "tranip" => "nat_dst_ip" }
        rename => { "transip" => "nat_src_ip" }
        rename => { "tranport" => "nat_dst_port" }
        rename => { "transport" => "nat_src_port" }
        rename => { "sentbyte" => "bytes_sent" }
        rename => { "sent" => "bytes_sent" }
        rename => { "rcvdbyte" => "bytes_received" }
        rename => { "rcvd" => "bytes_received" }
        rename => { "sentpkt" => "packets_sent" }
        rename => { "sent_pkt" => "packets_sent" }
        rename => { "rcvdpkt" => "packets_received" }
        rename => { "rcvd_pkt" => "packets_received" }
        rename => { "srcport" => "src_port" }
        rename => { "appcat" => "app_category" }
        rename => { "wanoptapptype" => "wan_opt_app_type" }
        rename => { "wanin" => "wan_in" }
        rename => { "wanout" => "wan_out" }
        rename => { "lanin" => "lan_in" }
        rename => { "lanout" => "lan_out" }
        rename => { "user" => "user_name" }
        rename => { "method" => "forti_http_method" }
        rename => { "cat" => "forti_web_cat_id" }
        rename => { "catdesc" => "forti_web_cat_desc" }
    }

    # If the log contains a key = type then recreate type = "fortinet" and rename type => log_type
    if [type] { mutate { rename => { "type" => "log_type" } } }
    mutate { rename => { "tmp_type" => "type" } }

    # Convert integer
    mutate {
        convert => { "duration" => "integer" }
        convert => { "bytes_sent" => "integer" }
        convert => { "bytes_received" => "integer" }
        convert => { "packets_sent" => "integer" }
        convert => { "packets_received" => "integer" }
        convert => { "crscore" => "integer" }
        convert => { "craction" => "integer" }
        convert => { "wan_in" => "integer" }
        convert => { "wan_out" => "integer" }
        convert => { "lan_in" => "integer" }
        convert => { "lan_out" => "integer" }
    }

	# Date Normalization
	if [forti_date] and [forti_time] {
		mutate {
			add_field => { "time_logged" => "%{forti_date} %{forti_time}" } 
			remove_field => [ "forti_date", "forti_time" ] 
		}
		date {
			match => [ "time_logged", "yyyy-MM-dd HH:mm:ss" ]
			target => "time_logged"
		}
	}
    if [start_time] {
        date {
            match => [ "start_time", "yyyy-MM-dd HH:mm:ss" ]
            target => "start_time"
        }
    }

    mutate { remove_field => [ "kv_message" ] }

    if !("_grokparsefailure" in [tags]) {
             mutate { remove_field => [ "tags" ] }
    }
 }
}
