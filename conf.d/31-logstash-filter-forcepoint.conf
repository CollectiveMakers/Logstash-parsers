filter {
  if [type] == "forcepoint" {
        csv {
          separator => ","
          columns => [ "Action","Category","Policy","User","Workstation","URL - Full","Host","Query","Protocol","Cloud App","Cloud App Risk Level","Cloud App Category","Source IP","Destination IP","Analytic Name","Severity","Threat Name","Threat Type","User Agent","Bandwidth (B)","Bytes Sent","Bytes Received","File Name","File Type","Referrer URL - Full","HTTP Status Code","Date & Time","Request Method","Port","Total Time (ms)" ]
        }
	mutate {
        	rename => { "Policy" => "policy" }
		rename => { "Query" => "http_query" }
		rename => { "Cloud App" => "cloud_app" }
		rename => { "Cloud App Risk Level" => "cloud_app_risk_level" }
		rename => { "Cloud App Category" => "cloud_app_category" }
		rename => { "HTTP Status Code" => "http_status" }
                rename => { "Source IP" => "src_ip" }
		rename => { "Destination IP" => "dst_ip" }
		rename => { "Port" => "dst_port" }
		rename => { "Date & Time" => "time_logged" }
		rename => { "Request Method" => "http_method" }
		rename => { "Total Time (ms)" => "response_time" }
		rename => { "User" => "user_name" }
		rename => { "Workstation" => "src_host" }
                rename => { "File Name" => "file_name" }
		rename => { "File Type" => "file_type" }
		rename => { "URL - Full" => "http_url" }
		rename => { "Host" => "dst_host" }
		rename => { "User Agent" => "user_agent" }
		rename => { "Protocol" => "http_proto" }
		rename => { "Severity" => "threat_severity" }
		rename => { "Referrer URL - Full" => "http_referrer_url" }
		rename => { "Action" => "action" }
		rename => { "Threat Name" => "threat_name" }
		rename => { "Threat Type" => "threat_type" }
		rename => { "Bytes Received" => "bytes_received" }
		rename => { "Bytes Sent" => "bytes_sent" }
		rename => { "Category" => "category" }
	}
	# Drop if first line of file
	if [bytes_received] == "Bytes Received" { drop{} }
	
  	if [bytes_received] == "None" {
		mutate { update => { "bytes_received" => "0" } }
	}
        if [bytes_sent] == "None" {
                mutate { update => { "bytes_sent" => "0" } }
        }
	# Date normalization
        if [time_logged] {
                date {
                        match => [ "time_logged", "yyyy/MM/dd HH:mm:ss" ]
                        target => "time_logged"
                }
        }
   }
}

